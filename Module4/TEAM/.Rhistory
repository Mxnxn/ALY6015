ggplot(salesAsIndex,aes(y=freq,x=index_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
salesAsSection = articles %>%  count(section_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq>2)
ggplot(salesAsSection,aes(y=freq,x=section_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
salesAsColor = articles %>%  count(perceived_colour_value_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq>2)
ggplot(salesAsColor,aes(y=freq,x=perceived_colour_value_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
salesAsColorName = articles %>%  count(perceived_colour_master_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq>2)
ggplot(salesAsColorName,aes(y=freq,x=perceived_colour_master_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
featureGraphics = as.data.frame(articles$graphical_appearance_name)
featureGraphics$Solid = ifelse(featureGraphics$`articles$graphical_appearance_name` =='Solid',1,2)
colnames(featureGraphics) = c("graphical_name",'solid')
featureGraphics$graphical_name = as.numeric(as.factor(featureGraphics$graphical_name))
library(misclassGLM)
mIndex =  sample(c(1,2), nrow(featureGraphics),
replace = T,
prob = c(0.7,0.3))
train_x = featureGraphics[mIndex == 1,]
test_x = featureGraphics[mIndex == 2,]
head(train_x)
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
summary(LR_model)
cm_data = as.factor(ifelse
(prob.train_x >= 0.5,
1, 2))
confusionMatrix(cm_data,
as.factor(ifelse(train_x$solid == 1, 1,2)))
confusionMatrix(cm_data,
as.factor(ifelse(train_x$solid == 1, 1,2)))
confusionMatrix(cm_data,
as.factor(ifelse(train_x$solid == 1, 1,2)))
prob.train_x = predict(LR_model,
newdata = train_x,
type = "response")
cm_data = as.factor(ifelse
(prob.train_x >= 0.5,
1, 2))
library(caret)
confusionMatrix(cm_data,
as.factor(ifelse(train_x$solid == 1, 1,2)))
prob.test_x = predict(LR_model,
newdata = test_x,
type = "response")
prob.test_x
cm_data = as.factor(ifelse
(prob.test_x >= 0.5,
1, 2))
cm_data
head(cm_data)
confusionMatrix(cm_data,
as.factor(ifelse(test_x$solid == 1, 1,2)),
)
library(pROC)
ROC = roc (test_x$solid, prob.test_x)
X =  plot(ROC,
col = "black",
ylab = "Sensitivity = TP rate",
xlab = 'specificity = FP rate')
#08  Calculate and interpret the AUC.
AUC = auc(ROC)
AUC
?step
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
articles = read.csv("./articles.csv")
customers = read.csv("./customers.csv")
psych::describe(customers)
summary(customers)
unique(customers$club_member_status)
library(dplyr)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
customers[customers$club_member_status == "",] = Mode(customers$club_member_status)
clubMemberStatus = customers %>% filter(club_member_status != "")
clubMemberStatus$club_member_status = as.numeric(as.factor(clubMemberStatus$club_member_status))
clubMemberStatus$fashion_news_frequency = as.numeric(as.factor(clubMemberStatus$fashion_news_frequency))
print(prop.table(table(clubMemberStatus$club_member_status))*100)
barplot(prop.table(table(clubMemberStatus$club_member_status))*100,
names.arg = c("Active","Pre-Create","Left"),
xlab="Membership",
col=ifelse(prop.table(table(clubMemberStatus$club_member_status))*100 > 80,'cyan3','grey'),
border=ifelse(prop.table(table(clubMemberStatus$club_member_status))*100 <5,'gray','white'),
main="Customers of H&M",
ylim=c(0,100))
hist(clubMemberStatus$age,
xlab="Age",
main="Age Distribution of H&M Customers",col='cyan3',border='white',
ylim=c(0,300000))
brackets <- clubMemberStatus %>% mutate(agegroup = case_when(age > 0  & age <= 15 ~ 'Teen',
age > 15  & age <= 40 ~ 'Youngsters (15-40)',
age > 40  & age <= 80 ~ 'Elders (40-80)')) # end function
age_brackets = as.data.frame(prop.table(table(brackets$agegroup)) * 100)
ggplot(age_brackets,aes(x=Var1,y=Freq))+geom_bar(stat='identity') +labs(title='Percentage of Age of H&M Customers')
summary(clubMemberStatus$age)
psych::describe(articles)
str(articles)
# PRODUCT SALES RELATIVE PLOT
salesAsType = articles %>%  count(product_type_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq > 2)
barplot(salesAsType$freq,names.arg=salesAsType$product_type_name,ylim=c(0,15),main='Percentage Type of Products of H&M',cex.names = 0.5,las=2,col=ifelse(sales$freq > 3,'Red','cyan4'),border='white')
salesAsTypeGroup = articles %>%  count(product_group_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq > 1)
barplot(salesAsTypeGroup$freq,names.arg=salesAsTypeGroup$product_group_name,ylim=c(0,50),main='Percentage Group of Products of H&M',cex.names = 0.5,las=2,col='Red',border='white')
salesAsGraphics = articles %>%  count(graphical_appearance_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq > 5)
barplot(salesAsGraphics$freq,names.arg=salesAsGraphics$graphical_appearance_name,ylim=c(0,50),main='Percentage Group of Products of H&M',cex.names = 0.6,las=2,col='Red',border='white')
library('ggplot2')
salesAsIndex = articles %>%  count(index_name) %>% mutate(freq = n / sum(n)*100)
ggplot(salesAsIndex,aes(y=freq,x=index_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
salesAsSection = articles %>%  count(section_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq>2)
ggplot(salesAsSection,aes(y=freq,x=section_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
salesAsColor = articles %>%  count(perceived_colour_value_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq>2)
ggplot(salesAsColor,aes(y=freq,x=perceived_colour_value_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
salesAsColorName = articles %>%  count(perceived_colour_master_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq>2)
ggplot(salesAsColorName,aes(y=freq,x=perceived_colour_master_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
featureGraphics = as.data.frame(articles$graphical_appearance_name)
featureGraphics$Solid = ifelse(featureGraphics$`articles$graphical_appearance_name` =='Solid',1,2)
colnames(featureGraphics) = c("graphical_name",'solid')
featureGraphics$graphical_name = as.numeric(as.factor(featureGraphics$graphical_name))
library(misclassGLM)
mIndex =  sample(c(1,2), nrow(featureGraphics),
replace = T,
prob = c(0.7,0.3))
train_x = featureGraphics[mIndex == 1,]
test_x = featureGraphics[mIndex == 2,]
head(train_x)
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
summary(LR_model)
prob.train_x = predict(LR_model,
newdata = train_x,
type = "response")
cm_data = as.factor(ifelse
(prob.train_x >= 0.5,
1, 2))
prob.train_x = predict(LR_model,
newdata = train_x,
type = "response")
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
summary(LR_model)
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
View(featureGraphics)
featureGraphics = as.data.frame(articles$graphical_appearance_name)
featureGraphics$Solid = ifelse(featureGraphics$`articles$graphical_appearance_name` =='Solid',1,2)
colnames(featureGraphics) = c("graphical_name",'solid')
featureGraphics$graphical_name = as.numeric(as.factor(featureGraphics$graphical_name))
library(misclassGLM)
mIndex =  sample(c(1,2), nrow(featureGraphics),
replace = T,
prob = c(0.7,0.3))
library(misclassGLM)
install.packages('bigmemory')
library(misclassGLM)
mIndex =  sample(c(1,2), nrow(featureGraphics),
replace = T,
prob = c(0.7,0.3))
train_x = featureGraphics[mIndex == 1,]
test_x = featureGraphics[mIndex == 2,]
head(train_x)
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
summary(LR_model)
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
solid ~ graphical_name
solid
LR_model <- glm(featureGraphics$solid ~ featureGraphics$graphical_name,
data = train_x,
family = binomial(link = "logit"))
LR_model <- glm(train_x$solid ~ train_x$graphical_name,
data = train_x,
family = binomial(link = "logit"))
?glm
?glm
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
featureGraphics = as.data.frame(articles$graphical_appearance_name)
featureGraphics$Solid = ifelse(featureGraphics$`articles$graphical_appearance_name` =='Solid',1,2)
colnames(featureGraphics) = c("graphical_name",'solid')
featureGraphics$graphical_name = as.numeric(as.factor(featureGraphics$graphical_name))
library(misclassGLM)
mIndex =  sample(c(1,2), nrow(featureGraphics),
replace = T,
prob = c(0.7,0.3))
train_x = featureGraphics[mIndex == 1,]
test_x = featureGraphics[mIndex == 2,]
head(train_x)
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
summary(LR_model)
prob.train_x = predict(LR_model,
newdata = train_x,
type = "response")
cm_data = as.factor(ifelse
(prob.train_x >= 0.5,
1, 2))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
articles = read.csv("./articles.csv")
customers = read.csv("./customers.csv")
psych::describe(customers)
summary(customers)
unique(customers$club_member_status)
library(dplyr)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
customers[customers$club_member_status == "",] = Mode(customers$club_member_status)
clubMemberStatus = customers %>% filter(club_member_status != "")
clubMemberStatus$club_member_status = as.numeric(as.factor(clubMemberStatus$club_member_status))
clubMemberStatus$fashion_news_frequency = as.numeric(as.factor(clubMemberStatus$fashion_news_frequency))
print(prop.table(table(clubMemberStatus$club_member_status))*100)
barplot(prop.table(table(clubMemberStatus$club_member_status))*100,
names.arg = c("Active","Pre-Create","Left"),
xlab="Membership",
col=ifelse(prop.table(table(clubMemberStatus$club_member_status))*100 > 80,'cyan3','grey'),
border=ifelse(prop.table(table(clubMemberStatus$club_member_status))*100 <5,'gray','white'),
main="Customers of H&M",
ylim=c(0,100))
hist(clubMemberStatus$age,
xlab="Age",
main="Age Distribution of H&M Customers",col='cyan3',border='white',
ylim=c(0,300000))
brackets <- clubMemberStatus %>% mutate(agegroup = case_when(age > 0  & age <= 15 ~ 'Teen',
age > 15  & age <= 40 ~ 'Youngsters (15-40)',
age > 40  & age <= 80 ~ 'Elders (40-80)')) # end function
age_brackets = as.data.frame(prop.table(table(brackets$agegroup)) * 100)
ggplot(age_brackets,aes(x=Var1,y=Freq))+geom_bar(stat='identity') +labs(title='Percentage of Age of H&M Customers')
summary(clubMemberStatus$age)
psych::describe(articles)
str(articles)
# PRODUCT SALES RELATIVE PLOT
salesAsType = articles %>%  count(product_type_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq > 2)
barplot(salesAsType$freq,names.arg=salesAsType$product_type_name,ylim=c(0,15),main='Percentage Type of Products of H&M',cex.names = 0.5,las=2,col=ifelse(sales$freq > 3,'Red','cyan4'),border='white')
salesAsTypeGroup = articles %>%  count(product_group_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq > 1)
barplot(salesAsTypeGroup$freq,names.arg=salesAsTypeGroup$product_group_name,ylim=c(0,50),main='Percentage Group of Products of H&M',cex.names = 0.5,las=2,col='Red',border='white')
salesAsGraphics = articles %>%  count(graphical_appearance_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq > 5)
barplot(salesAsGraphics$freq,names.arg=salesAsGraphics$graphical_appearance_name,ylim=c(0,50),main='Percentage Group of Products of H&M',cex.names = 0.6,las=2,col='Red',border='white')
library('ggplot2')
salesAsIndex = articles %>%  count(index_name) %>% mutate(freq = n / sum(n)*100)
ggplot(salesAsIndex,aes(y=freq,x=index_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
salesAsSection = articles %>%  count(section_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq>2)
ggplot(salesAsSection,aes(y=freq,x=section_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
salesAsColor = articles %>%  count(perceived_colour_value_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq>2)
ggplot(salesAsColor,aes(y=freq,x=perceived_colour_value_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
salesAsColorName = articles %>%  count(perceived_colour_master_name) %>% mutate(freq = n / sum(n)*100) %>% filter(freq>2)
ggplot(salesAsColorName,aes(y=freq,x=perceived_colour_master_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
featureGraphics = as.data.frame(articles$graphical_appearance_name)
featureGraphics$Solid = ifelse(featureGraphics$`articles$graphical_appearance_name` =='Solid',1,2)
colnames(featureGraphics) = c("graphical_name",'solid')
featureGraphics$graphical_name = as.numeric(as.factor(featureGraphics$graphical_name))
library(misclassGLM)
mIndex =  sample(c(1,2), nrow(featureGraphics),
replace = T,
prob = c(0.7,0.3))
train_x = featureGraphics[mIndex == 1,]
test_x = featureGraphics[mIndex == 2,]
head(train_x)
?glm
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
train_x
featureGraphics$Solid = ifelse(featureGraphics$`articles$graphical_appearance_name` =='Solid',1,0)
colnames(featureGraphics) = c("graphical_name",'solid')
featureGraphics$graphical_name = as.numeric(as.factor(featureGraphics$graphical_name))
library(misclassGLM)
source("~/Desktop/Northestern/ALY6015/Module4/TEAM/M4_TEAM.R", echo=TRUE)
mIndex =  sample(c(1,0), nrow(featureGraphics),
replace = T,
prob = c(0.7,0.3))
train_x = featureGraphics[mIndex == 1,]
test_x = featureGraphics[mIndex == 0,]
head(train_x)
?glm
head(train_x)
featureGraphics = as.data.frame(articles$graphical_appearance_name)
featureGraphics$Solid = ifelse(featureGraphics$`articles$graphical_appearance_name` =='Solid',1,0)
colnames(featureGraphics) = c("graphical_name",'solid')
featureGraphics$graphical_name = as.numeric(as.factor(featureGraphics$graphical_name))
library(misclassGLM)
mIndex =  sample(c(1,0), nrow(featureGraphics),
replace = T,
prob = c(0.7,0.3))
train_x = featureGraphics[mIndex == 1,]
test_x = featureGraphics[mIndex == 0,]
head(train_x)
LR_model <- glm(solid ~ graphical_name,
data = train_x,
family = binomial(link = "logit"))
summary(LR_model)
prob.train_x = predict(LR_model,
newdata = train_x,
type = "response")
cm_data = as.factor(ifelse
(prob.train_x >= 0.5,
1, 2))
library(caret)
confusionMatrix(cm_data,
as.factor(ifelse(train_x$solid == 1, 1,2)))
prob.test_x = predict(LR_model,
newdata = test_x,
type = "response")
View(articles)
ggplot(salesAsColorName,aes(y=freq,x=perceived_colour_master_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
ggplot(salesAsIndex,aes(y=freq,x=index_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
ggplot(salesAsSection,aes(y=freq,x=section_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
ggplot(salesAsColor,aes(y=freq,x=perceived_colour_value_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
View(salesAsSection)
ggplot(salesAsSection,aes(y=freq,x=section_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
ggplot(salesAsIndex,aes(y=freq,x=index_name))+geom_bar(stat='identity')+theme(axis.text.x = element_text(angle = 45,hjust=1,size=7))+labs(title='Percentage of Index of H&M Sales')
# HYPOTHESIS TESTING
ethnicity = matrix(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow = rows,ncol=4,byrow=TRUE)
# HYPOTHESIS TESTING
ethnicity = matrix(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow = 2,ncol=4,byrow=TRUE)
mTable
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow = 2,ncol=4,byrow=TRUE)
mTable
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),byrow=TRUE)
mTable
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$perceived_colour_value_name,nrow=2,ncol=8,salesAsIndex$index_name),byrow=TRUE)
mTable
# HYPOTHESIS TESTING
?matrix
mTable = matrix(c(salesAsColor$perceived_colour_value_name,nrow=2,ncol=8,salesAsIndex$index_name),byrow=TRUE)
mTable
mTable = matrix(c(salesAsColor$perceived_colour_value_name,nrow=8,ncol=2,salesAsIndex$index_name),byrow=TRUE)
mTable
rownames(ethnicity) = c('Color')
mTable = matrix(c(salesAsColor$perceived_colour_value_name,nrow=8,ncol=2,salesAsIndex$index_name),byrow=TRUE)
rownames(ethnicity) = c('Color')
mTable = matrix(c(salesAsColor$perceived_colour_value_name,nrow=8salesAsIndex$index_name),byrow=TRUE)
mTable = matrix(c(salesAsColor$perceived_colour_value_name,nrow=8,salesAsIndex$index_name),byrow=TRUE)
View(salesAsIndex)
mTable = matrix(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow=2,ncol=8,byrow=TRUE)
rownames(ethnicity) = c('Color')
colnames(ethnicity) = c("Caucasian","Hispanic","African American","Other")
mTable
rownames(mTable) = c('Color')
mTable = matrix(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow=6,ncol=8,byrow=TRUE)
rownames(mTable) = c('Color')
mTable
mTable = matrix(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow=6,ncol=2,byrow=TRUE)
rownames(mTable) = c('Color')
colnames(ethnicity) = c("Caucasian","Hispanic","African American","Other")
mTable
mTable = matrix(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow=2,ncol=6,byrow=TRUE)
rownames(mTable) = c('Color')
colnames(ethnicity) = c("Caucasian","Hispanic","African American","Other")
mTable
result <- chisq.test(mTable)
result <- chisq.test(mTable)
mTable
mTable = table(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow=2,ncol=6,byrow=TRUE)
mTable
mTable = table(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow=2,ncol=6,byrow=TRUE)
mTable
mTable = table(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name))
mTable = table(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow=2,ncol=6,byrow=FALSE)
mTable = matrix(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow=2,ncol=6,byrow=FALSE)
mTable
mTable = matrix(c(salesAsColor$perceived_colour_value_name,salesAsIndex$index_name),nrow=6,ncol=2,byrow=FALSE)
mTable
mTable
colnames(mTable) = c('Color','Section')
mTable
mTable
salesAsColor
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$n,salesAsIndex$n),nrow=6,ncol=2,byrow=FALSE)
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$n,salesAsIndex$n),nrow=6,ncol=2,byrow=FALSE)
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$n,salesAsIndex$n),nrow=6,ncol=6,byrow=FALSE)
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$n,salesAsIndex$n),nrow=6,ncol=6,byrow=FALSE)
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$n,salesAsIndex$n),byrow=FALSE)
mTable
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$n,salesAsIndex$n),nrow=6,ncol=8,byrow=FALSE)
mTable
salesAsColor
salesAsIndex
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$n,salesAsIndex$n),nrow=6,ncol=10,byrow=TRUE)
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$n,salesAsIndex$n),nrow=6,ncol=8,byrow=TRUE)
mTable
# HYPOTHESIS TESTING
mTable = matrix(c(salesAsColor$n,salesAsIndex$n),nrow=8,ncol=6,byrow=TRUE)
mTable
# HYPOTHESIS TESTING
table(salesAsColor,salesAsIndex)
# HYPOTHESIS TESTING
v1 = select(salesAsIndex,-c(freq))
View(v1)
v1 = select(salesAsColorName,-c(freq))
# HYPOTHESIS TESTING
v1 = select(salesAsIndex,-c(freq))
v2 = select(salesAsColorName,-c(freq))
joined = table(v1,v2)
joined = matrix(c(v1,v2)
joined = matrix(c(v1,v2))
# HYPOTHESIS TESTING
v1 = data.frame(salesAsIndex$n)
# 12.1
condiments<- data.frame('sodium' = c(270, 130, 230, 180, 80, 70, 200), 'type' = rep('condiments', 7), stringsAsFactors =F)
cereals <- data.frame('sodium' = c(260, 220, 290, 290, 200, 320, 140), 'type' =rep('cereals', 7), stringsAsFactors = FALSE)
desserts <- data.frame('sodium' = c(100, 180, 250, 250, 300, 360, 300, 160), 'type'= rep('desserts', 8), stringsAsFactors =F)
condiments
# HYPOTHESIS TESTING
index<- data.frame('sales' = salesAsIndex$n, 'type' = rep(c(salesAsIndex$index_name), NROW(salesAsIndex)), stringsAsFactors =F)
View(index)
salesAsIndex
length(salesAsIndex)
nrow(salesAsIndex)
# HYPOTHESIS TESTING
index<- data.frame('sales' = salesAsIndex$n, 'type' = rep(c(salesAsIndex$index_name), nrow(salesAsIndex)), stringsAsFactors =F)
View(index)
# HYPOTHESIS TESTING
v1 = (salesAsIndex)
v2 = (salesAsIndex)
# HYPOTHESIS TESTING
v1 = select(salesAsIndex,-c(freq))
v2 =  select(salesAsColor,-c(freq))
colnames(v1) = c('Sales','Name')
colnames(v2) = c('Sales','Name')
mValues = rbind(v1,v2)
View(mValues)
mValues$Name<- as.factor(mValues$Name)
aov
value_sodium
value_sodium<-rbind(condiments, cereals, desserts)
value_sodium$type<- as.factor(sodium$type)
value_sodium
food
#ANOVA test
s.anova<- aov(value_sodium~food, data=value_sodium)
s.anova<- aov(Sales~Name, data=value_sodium)
s.anova<- aov(Sales~Name, data=mValues)
smmry<-summary(s.anova)
smmry
s.anova<- aov(Sales~Name, data=mValues)
mValues
mValues$Sales<- as.factor(mValues$Sales)
s.anova<- aov(Sales~Name, data=mValues)
mValues
mValues$Sales<- as.numeric(as.factor(mValues$Sales))
s.anova<- aov(Sales~Name, data=mValues)
smmry<-summary(s.anova)
smmry
#Applying ANOVA
anova1 <- aov(growth~light_type+food+light_type:food,data=company)
s.anova<- aov(Name~Sales, data=mValues)
smmry<-summary(s.anova)
s.anova<- aov(Name~Sales, data=mValues)
mValues$Sales<- as.numeric(as.factor(mValues$Sales))
s.anova<- aov(Name~Sales, data=mValues)
mValues
ethnicity
result <- chisq.test(ethnicity)
#Creating vector
r1 <- c(724,335,174,107)
r2 <- c(370,292,152,140)
rows=2
ethnicity = matrix(c(r1,r2),nrow = rows,ncol=4,byrow=TRUE)
rownames(ethnicity) = c(2013,2014)
colnames(ethnicity) = c("Caucasian","Hispanic","African American","Other")
ethnicity
result <- chisq.test(ethnicity)
#Summary results
result$statistic
result$p.value
result$parameter
ethnicity
ethnicity = matrix(c(salesAsIndex$n,salesAsColor$n),nrow = 1,byrow=TRUE)
ethnicity
tSales = matrix(c(salesAsIndex$n,salesAsColor$n),nrow = 1,byrow=TRUE)
rownames(tSales) = c('Sales')
colnames(tSales) = c(salesAsIndex$index_name,salesAsColor$perceived_colour_value_name)
tSales
result <- chisq.test(tSales)
result
salesAsSection
tSalesG = matrix(c(salesAsGraphics$n),nrow = 1,byrow=TRUE)
tSalesG
colnames(tSales) = c(salesAsGraphics$graphical_appearance_name)
tSalesG
rownames(tSalesG) = c('Sales')
colnames(tSalesG) = c(salesAsGraphics$graphical_appearance_name)
tSalesG
result
result <- chisq.test(tSales)
result
source("~/Desktop/Northestern/ALY6015/Module4/TEAM/M4_TEAM.R")
